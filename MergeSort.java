public class MergeSort {

    public void mergeSort(Cve[] content) {

        // Check if the array has more than one element
        if (content.length >= 2) {
            int middle = content.length / 2;
            Cve[] left = new Cve[middle];
            Cve[] right = new Cve[content.length - middle];

            // Split the array into left and right subarrays
            for (int i = 0; i < left.length; i++) {
                left[i] = content[i];
            }
            for (int i = middle; i < content.length; i++) {
                right[i - middle] = content[i];
            }

            // Recursively sort the left and right subarrays
            mergeSort(left);
            mergeSort(right);

            // Merge the sorted subarrays back into the original array
            merge(content, left, right);
        }
    }

    private void merge(Cve[] arr, Cve[] left, Cve[] right) {
        int l = 0, r = 0, k = 0;

        // Merge the left and right subarrays into a single sorted array
        while (l < left.length && r < right.length) {
            int compareResult = compareCVSS(left[l], right[r]);

            if (compareResult < 0) {
                arr[k++] = left[l++];
            } else if (compareResult > 0) {
                arr[k++] = right[r++];
            } else {
                // If the CVSS metrics are equal, compare by ID
                if (left[l].id.compareTo(right[r].id) < 0) {
                    arr[k++] = left[l++];
                } else {
                    arr[k++] = right[r++];
                }
            }
        }

        // Copy remaining elements from the left and right subarrays
        while (l < left.length) {
            arr[k++] = left[l++];
        }

        while (r < right.length) {
            arr[k++] = right[r++];
        }
    }

    private int compareCVSS(Cve cve1, Cve cve2) {
        if (cve1.metrics.cvssMetricV2 != null && cve2.metrics.cvssMetricV2 != null) {
            if (cve1.metrics.cvssMetricV2.get(0).cvssData.baseScore < cve2.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
                return -1;
            } else if (cve1.metrics.cvssMetricV2.get(0).cvssData.baseScore > cve2.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
                return 1;
            } else {
                if (cve1.metrics.cvssMetricV2.get(0).impactScore < cve2.metrics.cvssMetricV2.get(0).impactScore) {
                    return -1;
                } else if (cve1.metrics.cvssMetricV2.get(0).impactScore > cve2.metrics.cvssMetricV2.get(0).impactScore) {
                    return 1;
                } else {
                    if (cve1.metrics.cvssMetricV2.get(0).exploitabilityScore < cve2.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                        return -1;
                    } else if (cve1.metrics.cvssMetricV2.get(0).exploitabilityScore > cve2.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
        }

        // If CVSS data is not available, compare based on Cve ID
        return cve1.id.compareTo(cve2.id);
    }


    // Print sorted elements
    void printSorted(Cve[] arr) {
        System.out.println("sorted : ");
        System.out.println(arr.length);
        int i = 1;

        for (Cve a : arr) {
            if (a.metrics.cvssMetricV2 != null && !a.metrics.cvssMetricV2.isEmpty()) {
                System.out.println(i + ". element");
                System.out.println("baseScore : " + a.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                System.out.println("impactScore : " + a.metrics.cvssMetricV2.get(0).impactScore);
                System.out.println("exploitabilityScore : " + a.metrics.cvssMetricV2.get(0).exploitabilityScore);
                System.out.println("id : " + a.id);
                System.out.println();
                i++;
            } else {
                System.out.println(i + ". element: CVSS data not available");
                System.out.println("id : " + a.id);
                System.out.println();
                i++;
            }

        }
    }
}
