import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;


public class JsonFetcher {

    static void foundError(Cve[] arr) {
        Cve temp = arr[0];
        for (Cve a : arr) {
            if (a.metrics.cvssMetricV2!=null&&temp.metrics.cvssMetricV2 != null) {
                if (temp.metrics.cvssMetricV2.get(0).cvssData.baseScore <= a.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
                    temp = a;
                } else {
                    System.out.println(temp.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                    System.out.println(a.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                    System.out.println("* " + a.id);
                }
            }
        }
    }



    public static void main(String[] args) throws IOException {
        // Create lists to parsing json to object class from https://json2csharp.com/code-converters/json-to-pojo
        ArrayList<Root> roots = new ArrayList<>();
        ArrayList<Cve> cves = new ArrayList<Cve>();

        // Define API key
        String apiKey = "you need to write your api key";

        try {
            // Fetch and save JSON data using your API key and specify the number of pages to fetch
            JsonFetcher.fetchAndSaveJsonData(apiKey, 3);
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 1; i < 3; i++) {
            String dosyaAdi = "output" + i + ".json"; // before save jason file path

            try (BufferedReader br = new BufferedReader(new FileReader(dosyaAdi))) {
                StringBuilder jsonVeri = new StringBuilder();
                String satir;

                while ((satir = br.readLine()) != null) {
                    jsonVeri.append(satir);
                }
                Gson gson = new Gson();
                Root root = gson.fromJson(jsonVeri.toString(), Root.class);
                roots.add(root);
            } catch (IOException e) {
                e.printStackTrace();
            } catch (JsonSyntaxException e) {
                e.printStackTrace();
            }
        }

        // Convert JSON data to Cve objects
        for (int i = 0; i < roots.size(); i++) {
            for (int j = 0; j < 2000; j++) {
                Cve a = new Cve();
                a = roots.get(i).vulnerabilities.get(j).cve;
                cves.add(a);
            }
        }



        // Create copies of the Cve array for different sorting algorithms because each algrithm sort same order array
        Cve[] cveArray_mergesort = cves.toArray(new Cve[cves.size()]);
        Cve[] cvearray_quicksort = Arrays.copyOf(cveArray_mergesort, cveArray_mergesort.length);
        Cve[] cvearray_insertionarray = Arrays.copyOf(cveArray_mergesort, cveArray_mergesort.length);
        Cve[] cvearray_heaparray = Arrays.copyOf(cveArray_mergesort, cveArray_mergesort.length);
        Cve[] cvearray_avlarray = Arrays.copyOf(cveArray_mergesort, cveArray_mergesort.length);

      //Perform Merge Sort and measure execution time
        MergeSort m = new MergeSort();
        double startTime = System.currentTimeMillis();
        m.mergeSort(cveArray_mergesort);

        m.printSorted(cveArray_mergesort);
        foundError(cveArray_mergesort);
        double estimatedTime = System.currentTimeMillis() - startTime;
        System.out.println("Merge sort algorithm is sorted in array " + estimatedTime + " milliseconds.");

        // Perform Quick Sort and measure execution time
        QuickSort q = new QuickSort();
        double startTime2 = System.currentTimeMillis();
        q.quickSort(cvearray_quicksort, 0, cvearray_quicksort.length - 1);
        double estimatedTime2 = System.currentTimeMillis() - startTime2;
        System.out.println("Quick sort algorithm is sorted in array " + estimatedTime2 + " milliseconds.");

        // Perform AVL Sort and measure execution time
        AVLSort avlSort = new AVLSort();
        double startTime4 = System.currentTimeMillis();
        for (Cve cve : cvearray_avlarray) {
            avlSort.insert(cve);
        }
        double estimatedTime4 = System.currentTimeMillis() - startTime4;
        System.out.println("AVL sort algorithm is sorted in array " + estimatedTime4 + " milliseconds.");

        // Perform Heap Sort and measure execution time
        HeapSort h = new HeapSort();
        double startTime5 = System.currentTimeMillis();
        h.heapSort(cvearray_heaparray);
        double estimatedTime5 = System.currentTimeMillis() - startTime5;
        System.out.println("Heap sort algorithm is sorted in array " + estimatedTime5 + " milliseconds.");

        // Perform Insertion Sort and measure execution time
        InsertionSort i = new InsertionSort();
        double startTime3 = System.currentTimeMillis();
        i.insertionSort(cvearray_insertionarray);
        double estimatedTime3 = System.currentTimeMillis() - startTime3;
        System.out.println("Insertion sort algorithm is sorted in array " + estimatedTime3 + " milliseconds.");
    }


    public static void fetchAndSaveJsonData(String apiKey, int pageCount) throws IOException {
        // Start a loop for each page
        for (int i = 1; i <= pageCount; i++) {
            // Create and display the API URL fetch 2000 data every so page count must be 26 for 50000 datas
            String apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=2000&startIndex=" + (2001 * i);
            System.out.println(apiUrl);

            // Create the URL and open a connection
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.connect();

            // Read the API response and parse it into JSON
            InputStream inputStream = connection.getInputStream();
            Reader reader = new InputStreamReader(inputStream);
            Gson gson = new Gson();
            Object json = gson.fromJson(reader, Object.class);
            String fileName = "output" + i + ".json";

            // Save the JSON data to a file and inform the user
            try (FileWriter fileWriter = new FileWriter(fileName)) {
                gson.toJson(json, fileWriter);
                System.out.println("The data was saved in the "+fileName+" file");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
