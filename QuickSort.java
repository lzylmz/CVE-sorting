
public class QuickSort {

    // QuickSort algorithm
    public void quickSort(Cve[] arr, int low, int high) {
        if (low < high) {
            int q = partition(arr, low, high);
            quickSort(arr, low, q - 1);
            quickSort(arr, q + 1, high);
        }
    }

    // Partitioning step of QuickSort
    public int partition(Cve[] arr, int low, int high) {

        // Find a valid pivot index (one with non-null metrics.cvssMetricV2)
        int pivotIndex = high;
        while (arr[pivotIndex].metrics.cvssMetricV2 == null && pivotIndex > 0) {
            pivotIndex--;
        }
        Cve pivot = arr[pivotIndex];

        int i = low - 1;

        for (int j = low; j <= high - 1; j++) {
            // Handle cases where either of the elements being compared has null metrics
            if (arr[j].metrics.cvssMetricV2 == null) {
                // Compare based on Cve id if metrics are null
                if (arr[j].id.compareTo(pivot.id) < 0) {
                    i++;
                    // Swap elements if needed
                    Cve temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
            // Handle cases where both elements have non-null metrics
            else if (arr[j].metrics.cvssMetricV2.get(0).cvssData.baseScore < pivot.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
                i++;
                // Swap elements if needed
                Cve temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            } else if (pivot.metrics.cvssMetricV2.get(0).cvssData.baseScore == arr[j].metrics.cvssMetricV2.get(0).cvssData.baseScore
                    && arr[j].metrics.cvssMetricV2.get(0).impactScore < pivot.metrics.cvssMetricV2.get(0).impactScore) {
                i++;
                // Swap elements if needed
                Cve temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            } else if (pivot.metrics.cvssMetricV2.get(0).cvssData.baseScore == arr[j].metrics.cvssMetricV2.get(0).cvssData.baseScore
                    && pivot.metrics.cvssMetricV2.get(0).impactScore == arr[j].metrics.cvssMetricV2.get(0).impactScore
                    && arr[j].metrics.cvssMetricV2.get(0).exploitabilityScore < pivot.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                i++;
                // Swap elements if needed
                Cve temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            } else if (pivot.metrics.cvssMetricV2.get(0).cvssData.baseScore == arr[j].metrics.cvssMetricV2.get(0).cvssData.baseScore
                    && pivot.metrics.cvssMetricV2.get(0).impactScore == arr[j].metrics.cvssMetricV2.get(0).impactScore
                    && pivot.metrics.cvssMetricV2.get(0).exploitabilityScore == arr[j].metrics.cvssMetricV2.get(0).exploitabilityScore
                    && arr[j].id.compareTo(pivot.id) < 0) {
                i++;
                // Swap elements if needed
                Cve temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap pivot element to its correct position
        Cve temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Print sorted elements
    void printSorted(Cve[] arr) {
        System.out.println("sorted : ");
        System.out.println(arr.length);
        int i = 1;

        for (Cve a : arr) {
            if (a != null && a.metrics != null && a.metrics.cvssMetricV2 != null && !a.metrics.cvssMetricV2.isEmpty()) {
                System.out.println(i + ". element");
                System.out.println("baseScore : " + a.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                System.out.println("impactScore : " + a.metrics.cvssMetricV2.get(0).impactScore);
                System.out.println("exploitabilityScore : " + a.metrics.cvssMetricV2.get(0).exploitabilityScore);
                System.out.println("id : " + a.id);
                System.out.println();
                i++;
            }
        }
    }

}

