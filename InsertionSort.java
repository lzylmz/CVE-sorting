
public class InsertionSort {

    // Perform the insertion sort algorithm on an array of Cve objects
    public void insertionSort(Cve[] arr) {
        for (int i = 1; i < arr.length; i++) {
            Cve key = arr[i];
            int j = i - 1;

            // Compare Cve objects based on CVSS scores and sort in ascending order
            while (j >= 0 && compareCVSS(arr[j], key) > 0) {
                arr[j + 1] = arr[j];
                j--;
            }

            arr[j + 1] = key;
        }
    }

    // Compare two Cve objects based on CVSS scores and, if equal, by ID
    private int compareCVSS(Cve cve1, Cve cve2) {
        if (cve1.metrics.cvssMetricV2 == null && cve2.metrics.cvssMetricV2 == null) {
            // If CVSS data is not available for both CVEs, compare based on Cve ID
            return cve1.id.compareTo(cve2.id);
        } else if (cve1.metrics.cvssMetricV2 == null) {
            // If CVSS data is not available for cve1, consider it lower priority
            return -1;
        } else if (cve2.metrics.cvssMetricV2 == null) {
            // If CVSS data is not available for cve2, consider it lower priority
            return 1;
        }

        // Compare CVSS metrics
        if (cve1.metrics.cvssMetricV2.get(0).cvssData.baseScore < cve2.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
            return -1;
        } else if (cve1.metrics.cvssMetricV2.get(0).cvssData.baseScore > cve2.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
            return 1;
        } else {
            if (cve1.metrics.cvssMetricV2.get(0).impactScore < cve2.metrics.cvssMetricV2.get(0).impactScore) {
                return -1;
            } else if (cve1.metrics.cvssMetricV2.get(0).impactScore > cve2.metrics.cvssMetricV2.get(0).impactScore) {
                return 1;
            } else {
                if (cve1.metrics.cvssMetricV2.get(0).exploitabilityScore < cve2.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                    return -1;
                } else if (cve1.metrics.cvssMetricV2.get(0).exploitabilityScore > cve2.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                    return 1;
                } else {
                    return cve1.id.compareTo(cve2.id);
                }
            }
        }
    }


    // Print the sorted array of Cve objects with CVSS scores and IDs
    void printSorted(Cve[] arr) {
        System.out.println("Sorted Array:");
        System.out.println("Array Length: " + arr.length);
        int i = 1;

        for (Cve a : arr) {
            if (a != null && a.metrics != null && a.metrics.cvssMetricV2 != null && !a.metrics.cvssMetricV2.isEmpty()) {
                System.out.println(i + ". Element");
                System.out.println("Base Score: " + a.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                System.out.println("Impact Score: " + a.metrics.cvssMetricV2.get(0).impactScore);
                System.out.println("Exploitability Score: " + a.metrics.cvssMetricV2.get(0).exploitabilityScore);
                System.out.println("ID: " + a.id);
                System.out.println();
                i++;
            }
        }
    }
}
