

public class AVLSort {
    // Nested class to represent nodes in the AVL tree
    private static class CveNode {
        Cve data;
        int height;
        CveNode left;
        CveNode right;

        CveNode(Cve data) {
            this.data = data;
            this.height = 1;
        }
    }

    private CveNode root;

    // Public method to insert a Cve object into the AVL tree
    public void insert(Cve data) {
        root = insert(root, data);
    }

    // Private method to get the height of a node (null nodes have height 0)
    private int height(CveNode node) {
        if (node == null) {
            return 0;
        }
        return node.height;
    }

    // Private method to get the balance factor of a node
    private int getBalance(CveNode node) {
        if (node == null) {
            return 0;
        }
        return height(node.left) - height(node.right);
    }

    // Private method to perform a right rotation on the AVL tree
    private CveNode rotateRight(CveNode y) {
        if (y == null || y.left == null) {
            return y;
        }

        CveNode x = y.left;
        CveNode T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;

        return x;
    }

    // Private method to perform a left rotation on the AVL tree
    private CveNode rotateLeft(CveNode x) {
        if (x == null || x.right == null) {
            return x;
        }

        CveNode y = x.right;
        CveNode T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;

        return y;
    }

    // Private method to insert a Cve object into the AVL tree
    private CveNode insert(CveNode node, Cve data) {
        if (node == null) {
            return new CveNode(data);
        }

        if (data.metrics.cvssMetricV2 != null) {
            int result = compareCveData(data, node);

            if (result < 0) {
                node.left = insert(node.left, data);
            } else if (result > 0) {
                node.right = insert(node.right, data);
            } else {
                // Handle the case where all three scores are the same
                int idComparison = data.id.compareTo(node.data.id);

                if (idComparison <= 0) {
                    node.left = insert(node.left, data);
                } else {
                    node.right = insert(node.right, data);
                }
            }
        }

        node.height = 1 + Math.max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && data.metrics.cvssMetricV2 != null) {
            if (compareCveData(data, node.left) < 0) {
                return rotateRight(node);
            }
        }

        if (balance < -1 && data.metrics.cvssMetricV2 != null) {
            if (compareCveData(data, node.right) > 0) {
                return rotateLeft(node);
            }
        }

        if (balance > 1 && data.metrics.cvssMetricV2 != null) {
            if (compareCveData(data, node.left) > 0) {
                node.left = rotateLeft(node.left);
                return rotateRight(node);
            }
        }

        if (balance < -1 && data.metrics.cvssMetricV2 != null) {
            if (compareCveData(data, node.right) < 0) {
                node.right = rotateRight(node.right);
                return rotateLeft(node);
            }
        }

        return node;
    }

    // Private method to compare the CVSS data of two Cve objects
    private int compareCveData(Cve data, CveNode node) {
        if (data.metrics.cvssMetricV2 != null && node.data.metrics.cvssMetricV2 != null) {
            if (data.metrics.cvssMetricV2.get(0).cvssData.baseScore != node.data.metrics.cvssMetricV2.get(0).cvssData.baseScore) {
                return Double.compare(node.data.metrics.cvssMetricV2.get(0).cvssData.baseScore, data.metrics.cvssMetricV2.get(0).cvssData.baseScore);
            } else if (data.metrics.cvssMetricV2.get(0).impactScore != node.data.metrics.cvssMetricV2.get(0).impactScore) {
                return Double.compare(node.data.metrics.cvssMetricV2.get(0).impactScore, data.metrics.cvssMetricV2.get(0).impactScore);
            } else if (data.metrics.cvssMetricV2.get(0).exploitabilityScore != node.data.metrics.cvssMetricV2.get(0).exploitabilityScore) {
                return Double.compare(node.data.metrics.cvssMetricV2.get(0).exploitabilityScore, data.metrics.cvssMetricV2.get(0).exploitabilityScore);
            }
        }
        return 0; // Default case, the scores are the same
    }

    // Public method to print the sorted elements of the AVL tree
    public void printSorted() {
        System.out.println("Sorted elements:");
        printSorted(root);
    }

    // Private method to print the sorted elements of the AVL tree in-order
    private void printSorted(CveNode node) {
        if (node != null) {
            printSorted(node.left);

            // Check for null before accessing node.data
            if (node.data != null) {
                if (node.data.metrics != null && node.data.metrics.cvssMetricV2 != null) {
                    if (node.data.metrics.cvssMetricV2.get(0) != null && node.data.metrics.cvssMetricV2.get(0).cvssData != null) {
                        System.out.println("baseScore: " + node.data.metrics.cvssMetricV2.get(0).cvssData.baseScore);
                        System.out.println("impactScore: " + node.data.metrics.cvssMetricV2.get(0).impactScore);
                        System.out.println("exploitabilityScore: " + node.data.metrics.cvssMetricV2.get(0).exploitabilityScore);
                    }
                }

                System.out.println("id: " + node.data.id);
            }

            System.out.println();
            printSorted(node.right);
        }
    }
}
